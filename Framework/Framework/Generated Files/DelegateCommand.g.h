// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once
#include "winrt/Windows.UI.Xaml.Data.h"
#include "winrt/Windows.UI.Xaml.h"
#include "winrt/Windows.UI.Xaml.Input.h"
#include "winrt/Framework.h"

namespace winrt::Framework::implementation {

template <typename D, typename... I>
struct WINRT_EBO DelegateCommand_base : implements<D, Framework::IDelegateCommand, Windows::UI::Xaml::Input::ICommand, composing, I...>,
    impl::require<D, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Windows::UI::Xaml::DependencyObject>
{
    using base_type = DelegateCommand_base;
    using class_type = Framework::DelegateCommand;
    using implements_type = typename DelegateCommand_base::implements_type;
    using implements_type::implements_type;
    using composable_base = Windows::UI::Xaml::DependencyObject;
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, impl::default_interface_t<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<impl::default_interface_t<class_type>>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Framework.DelegateCommand";
    }
    DelegateCommand_base()
    {
        get_activation_factory<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::IDependencyObjectFactory>().CreateInstance(*this, this->m_inner);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_DELEGATECOMMAND_XAML_G_H) || __has_include("DelegateCommand.xaml.g.h")

#include "DelegateCommand.xaml.g.h"

#else

namespace winrt::Framework::implementation
{
    template <typename D, typename... I>
    using DelegateCommandT = DelegateCommand_base<D, I...>;
}

#endif
