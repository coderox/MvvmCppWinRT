// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data {

struct PropertyChangedEventHandler;

}

WINRT_EXPORT namespace winrt::Framework {

struct IBindableBaseFactory;
struct IBindableBaseProtected;
struct IDelegateCommand;
struct BindableBase;
struct DelegateCommand;

}

namespace winrt::impl {

template <> struct category<Framework::IBindableBaseFactory>{ using type = interface_category; };
template <> struct category<Framework::IBindableBaseProtected>{ using type = interface_category; };
template <> struct category<Framework::IDelegateCommand>{ using type = interface_category; };
template <> struct category<Framework::BindableBase>{ using type = class_category; };
template <> struct category<Framework::DelegateCommand>{ using type = class_category; };
template <> struct name<Framework::IBindableBaseFactory>{ static constexpr auto & value{ L"Framework.IBindableBaseFactory" }; };
template <> struct name<Framework::IBindableBaseProtected>{ static constexpr auto & value{ L"Framework.IBindableBaseProtected" }; };
template <> struct name<Framework::IDelegateCommand>{ static constexpr auto & value{ L"Framework.IDelegateCommand" }; };
template <> struct name<Framework::BindableBase>{ static constexpr auto & value{ L"Framework.BindableBase" }; };
template <> struct name<Framework::DelegateCommand>{ static constexpr auto & value{ L"Framework.DelegateCommand" }; };
template <> struct guid<Framework::IBindableBaseFactory>{ static constexpr GUID value{ 0x0E245918,0x283D,0x5937,{ 0x9D,0x85,0x73,0x4A,0x4B,0xD2,0x21,0x95 } }; };
template <> struct guid<Framework::IBindableBaseProtected>{ static constexpr GUID value{ 0x5C53B3E6,0xCB49,0x5095,{ 0xBF,0xB0,0xF7,0x4E,0xD0,0x12,0xA1,0x71 } }; };
template <> struct guid<Framework::IDelegateCommand>{ static constexpr GUID value{ 0xA3EDCEE1,0xBF4B,0x5FD5,{ 0x8B,0xA3,0xB4,0x58,0x9B,0x78,0x5C,0x2F } }; };
template <> struct default_interface<Framework::BindableBase>{ using type = Framework::IBindableBaseProtected; };
template <> struct default_interface<Framework::DelegateCommand>{ using type = Framework::IDelegateCommand; };

template <typename D>
struct consume_Framework_IBindableBaseFactory
{
    Framework::BindableBase CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Framework::IBindableBaseFactory> { template <typename D> using type = consume_Framework_IBindableBaseFactory<D>; };

template <typename D>
struct consume_Framework_IBindableBaseProtected
{
    void RaisePropertyChanged(param::hstring const& propertyName) const;
};
template <> struct consume<Framework::IBindableBaseProtected> { template <typename D> using type = consume_Framework_IBindableBaseProtected<D>; };

template <typename D>
struct consume_Framework_IDelegateCommand
{
    void RaiseCanExecuteChanged() const;
};
template <> struct consume<Framework::IDelegateCommand> { template <typename D> using type = consume_Framework_IDelegateCommand<D>; };

template <> struct abi<Framework::IBindableBaseFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Framework::IBindableBaseProtected>{ struct type : IInspectable
{
    virtual HRESULT __stdcall RaisePropertyChanged(HSTRING propertyName) noexcept = 0;
};};

template <> struct abi<Framework::IDelegateCommand>{ struct type : IInspectable
{
    virtual HRESULT __stdcall RaiseCanExecuteChanged() noexcept = 0;
};};

}
